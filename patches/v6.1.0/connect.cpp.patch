diff --git a/src/connect/connect.cpp b/src/connect/connect.cpp
index 11f458c10..340273565 100644
--- a/src/connect/connect.cpp
+++ b/src/connect/connect.cpp
@@ -45,6 +45,48 @@ LOG_COMPONENT_DEF(connect, LOG_SEVERITY_INFO);
 namespace connect_client {
 
 namespace {
+    class SimplyPrintRequest final : public http::Request {
+    private:
+        HeaderOut headers[6];
+        const std::string &data;
+
+    public:
+        SimplyPrintRequest(const std::string &data, const char* token, Printer * printer)
+            : headers {
+                { "Content-Type", "text/plain", nullopt },
+                { "Fingerprint", printer->printer_info().fingerprint, Printer::PrinterInfo::FINGERPRINT_HDR_SIZE },
+                { "Token", token, nullopt },
+                user_agent_printer,
+                user_agent_version,
+                { nullptr, nullptr, nullopt }
+            },
+            data(data) {}
+
+        // Implement required methods
+        virtual const char *url() const override {
+            return "/p/simplyprint";
+        }
+
+        virtual Method method() const override {
+            return Method::Post;
+        }
+
+        virtual const HeaderOut *extra_headers() const override {
+            return headers;
+        }
+
+        virtual ContentType content_type() const override {
+            return ContentType::TextPlain;
+        }
+
+        virtual const char *connection() const override {
+            return "keep-alive";
+        }
+
+        virtual const std::string &body() const {
+            return data;
+        }
+    };
 
     // Send a ping if there's no activity from us during this time (15_000 ms = 15s)
     constexpr uint32_t ping_inactivity = 15000;
@@ -621,6 +663,34 @@ CommResult Connect::prepare_connection(CachedFactory &conn_factory, const Printe
     return monostate {};
 }
 
+int Connect::send_simplyprint(const std::string &data) {
+    log_debug(connect, "Sending simple print data: %s", data.c_str());
+
+    // Create the SimplePrintRequest
+    CachedFactory conn_factory;
+    auto [config, cfg_changed] = printer.config();
+    SimplyPrintRequest request(data, config.token, &printer);
+    conn_factory.refresh(config);
+
+    // Prepare the HTTP client and send the request
+    HttpClient http(conn_factory);
+    auto result = http.send(request);
+
+    // Handle the response
+    if (holds_alternative<http::Error>(result)) {
+        log_error(connect, "Failed to send simple print data");
+        return -1; // Return a custom error code (e.g., -1 for failure)
+    } else {
+        // Extract the response
+        auto response = get<http::Response>(result);
+
+        // Log the success and return the HTTP status code
+        log_debug(connect, "Simple print data sent successfully with status code: %d", response.status);
+
+        return response.status; // Return the server's HTTP status code
+    }
+}
+
 CommResult Connect::send_command(CachedFactory &conn_factory, const Printer::Config &config, Action &&action, optional<CommandId> background_command_id) {
     log_debug(connect, "Sending to connect");
     BasicRequest request(printer, config, action, background_command_id);
