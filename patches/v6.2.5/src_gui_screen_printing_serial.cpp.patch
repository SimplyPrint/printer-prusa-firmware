diff --git a/src/gui/screen_printing_serial.cpp b/src/gui/screen_printing_serial.cpp
index bce344dd882a7ed4451f2cdc51fb85cc93e4afc7..94f291387266067e9cbf6d6eb2c7c103818d22aa 100644
--- a/src/gui/screen_printing_serial.cpp
+++ b/src/gui/screen_printing_serial.cpp
@@ -10,23 +10,27 @@
 #include "screen_menu_tune.hpp"
 #include "img_resources.hpp"
 #include <serial_printing.hpp>
-
+#include "screen_messages.hpp"
 #if ENABLED(CRASH_RECOVERY)
     #include "../Marlin/src/feature/prusa/crash_recovery.hpp"
 #endif
 
+point_i16_t get_location() {
+        return {
+                   GuiDefaults::RectScreenBody.TopCenter().x / 2,
+                    GuiDefaults::RectScreenBody.TopCenter().y
+                };
+    }
 screen_printing_serial_data_t::screen_printing_serial_data_t()
     : ScreenPrintingModel(_(caption))
-    , octo_icon(this, Rect16((GuiDefaults::ScreenWidth - img::serial_printing_172x138.w) / 2, GuiDefaults::RectScreenBody.Top(), img::serial_printing_172x138.w, img::serial_printing_172x138.h), &img::serial_printing_172x138)
     , last_tick(0)
     , connection(connection_state_t::connected)
+    , term(this, get_location(), &term_buff)
+
     , last_state(marlin_server::State::Aborted) {
     ClrMenuTimeoutClose();
     SetOnSerialClose();
 
-    octo_icon.Disable();
-    octo_icon.Unshadow();
-
     SetButtonIconAndLabel(BtnSocket::Right, BtnRes::Disconnect, LabelRes::Stop);
 }
 
@@ -54,6 +58,13 @@ void screen_printing_serial_data_t::windowEvent(window_t *sender, GUI_event_t ev
         last_state = state;
     }
 
+    // Update the message buffer content in the terminal
+    char *txt = nullptr;
+    while (screen_messages_data_t::message_buffer.try_get(txt)) {
+        term.Printf("%s\n", txt);
+        free(txt);
+    }
+
     ScreenPrintingModel::windowEvent(sender, event, param);
 }
 
@@ -62,7 +73,7 @@ void screen_printing_serial_data_t::tuneAction() {
 }
 
 void screen_printing_serial_data_t::pauseAction() {
-    // pause or resume button, depenging on what state we are in
+    // pause or resume button, depending on what state we are in
     marlin_server::State state = marlin_vars().print_state;
     switch (state) {
     case marlin_server::State::Paused:
