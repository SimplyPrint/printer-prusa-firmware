diff --git a/src/gui/screen_printing.cpp b/src/gui/screen_printing.cpp
index 5fb9c197b94455bb5fc77743092aae9c06f63563..bf92e42fe6c83e55d6fd0bf91d7bd0660dcef597 100644
--- a/src/gui/screen_printing.cpp
+++ b/src/gui/screen_printing.cpp
@@ -19,6 +19,7 @@
 #include <option/has_loadcell.h>
 #include <option/has_mmu2.h>
 #include <option/has_toolchanger.h>
+#include <connect/connect.hpp>
 #if HAS_MMU2()
     #include <feature/prusa/MMU2/mmu2_mk4.h>
     #include <window_msgbox.hpp>
@@ -37,6 +38,17 @@
     #include <connect/marlin_printer.hpp>
 #endif
 
+
+bool send_message_sp(std::string message, const char * error_message) {
+    int response_code = connect_client::send_simplyprint(message);
+    if (response_code / 100 != 2) {
+        MsgBoxWarning(_(error_message), Responses_Ok);
+        return false;
+    }
+    return true;
+}
+
+
 using namespace marlin_server;
 
 void screen_printing_data_t::invalidate_print_state() {
@@ -58,28 +70,70 @@ void screen_printing_data_t::tuneAction() {
     if (buttons[ftrstd::to_underlying(BtnSocket::Left)].IsShadowed()) {
         return;
     }
+#if HAS_LARGE_DISPLAY()
+    if (showing_end_result) {
+        switch (end_screen_state){
+            case EndScreenState::end_screen:
+                break;
+            case EndScreenState::print_result_screen:
+                send_message_sp("ps", "Failed to send print result message.");
+                end_screen_state = EndScreenState::end_screen;
+                start_showing_end_result();
+                break;
+        }
+        return;
+    }
+#endif
+
+
     switch (GetState()) {
-    case printing_state_t::PRINTING:
-    case printing_state_t::SKIPPABLE_OPERATION:
-    case printing_state_t::PAUSED:
-        Screens::Access()->Open(ScreenFactory::Screen<ScreenMenuTune>);
-        break;
-    case printing_state_t::PRINTED:
-        if (is_waiting_for_connect_set_ready()) {
+        case printing_state_t::PRINTING:
+        case printing_state_t::SKIPPABLE_OPERATION:
+        case printing_state_t::PAUSED:
+            Screens::Access()->Open(ScreenFactory::Screen<ScreenMenuTune>);
+            break;
+        case printing_state_t::STOPPED:
+        case printing_state_t::PRINTED:
+            if (is_waiting_for_connect_set_ready()) {
+
 #if BUDDY_ENABLE_CONNECT()
-            connect_client::MarlinPrinter::set_printer_ready(true);
+                connect_client::MarlinPrinter::set_printer_ready(true);
 #endif
-            set_tune_icon_and_label(); // Disable Set Ready button
-        }
-    default:
-        break;
+            }
+            send_message_sp("nqi", "Failed to send next_queue message.");
+            ResetButtonRect(BtnSocket::Left);
+            ResetButtonRect(BtnSocket::Middle);
+            ResetButtonRect(BtnSocket::Right);
+            SetButtonVisible(BtnSocket::Left, true);
+            SetButtonVisible(BtnSocket::Middle, true);
+            SetButtonVisible(BtnSocket::Right, true);
+            was_network_print = false;
+            marlin_client::print_exit();
+            return;
+        default:
+            break;
     }
+
 }
 
 void screen_printing_data_t::pauseAction() {
     if (buttons[ftrstd::to_underlying(BtnSocket::Middle)].IsShadowed()) {
         return;
     }
+
+#if HAS_LARGE_DISPLAY()
+    if (showing_end_result) {
+
+        switch (end_screen_state) {
+            case EndScreenState::end_screen:
+                change_print_state();
+                break;
+            case EndScreenState::print_result_screen:
+                break;
+        }
+        return;
+    }
+#endif
     switch (GetState()) {
     case printing_state_t::PRINTING:
         marlin_client::print_pause();
@@ -95,6 +149,11 @@ void screen_printing_data_t::pauseAction() {
         break;
     case printing_state_t::STOPPED:
     case printing_state_t::PRINTED:
+        if (was_network_print) {
+            send_message_sp("rp", "Failed to send bed clear message.");
+            was_network_print = false;
+            connect_client::is_print_network = true;
+        }
         screen_printing_reprint();
         change_print_state();
         break;
@@ -103,13 +162,43 @@ void screen_printing_data_t::pauseAction() {
     }
 }
 
+
+
 void screen_printing_data_t::stopAction() {
     if (buttons[ftrstd::to_underlying(BtnSocket::Right)].IsShadowed()) {
         return;
     }
+#if HAS_LARGE_DISPLAY()
+    if (showing_end_result) {
+
+    switch (end_screen_state){
+        case EndScreenState::end_screen:
+            break;
+        case EndScreenState::print_result_screen:
+            send_message_sp("pf", "Failed to send print result message.");
+            end_screen_state = EndScreenState::end_screen;
+            start_showing_end_result();
+            break;
+        }
+        return;
+    }
+#endif
+
     switch (GetState()) {
     case printing_state_t::STOPPED:
     case printing_state_t::PRINTED:
+        if (was_network_print) {
+            send_message_sp("bc", "Failed to send bed clear message.");
+            was_network_print = false;
+        }
+        ResetButtonRect(BtnSocket::Left);
+        ResetButtonRect(BtnSocket::Middle);
+        ResetButtonRect(BtnSocket::Right);
+        SetButtonVisible(BtnSocket::Left, true);
+        SetButtonVisible(BtnSocket::Middle, true);
+        SetButtonVisible(BtnSocket::Right, true);
+
+
         marlin_client::print_exit();
         return;
     case printing_state_t::PAUSING:
@@ -127,13 +216,14 @@ void screen_printing_data_t::stopAction() {
         }
     }
     }
+
 }
 
 /******************************************************************************/
 
 namespace {
 constexpr size_t column_left { 30 };
-
+constexpr size_t button_width {200};
 constexpr size_t row_0 { 104 };
 constexpr size_t row_height { 20 };
 
@@ -158,6 +248,9 @@ constexpr size_t rotating_circles_left_offset { 0 };
 constexpr Rect16 rotating_circles_rect { column_left + rotating_circles_left_offset, get_row(1) + height(etime_val_font) + 5, rotating_circles_width, rotating_circles_height };
 
 constexpr Rect16 end_result_body_rect { 0, row_0 - EndResultBody::extra_top_space, GuiDefaults::ScreenWidth, GuiDefaults::ScreenHeight - GuiDefaults::FooterHeight - row_0 };
+constexpr Rect16 sp_rect { 0, 15, GuiDefaults::ScreenWidth, 63 };
+constexpr Rect16 sp_big_button_l { 30 , 90, button_width, button_width };
+constexpr Rect16 sp_big_button_r { GuiDefaults::ScreenWidth - 30 - button_width, 90, button_width, button_width };
 #endif
 
 } // namespace
@@ -193,11 +286,22 @@ screen_printing_data_t::screen_printing_data_t()
     , message_popup(this, Rect16::Merge(std::array<Rect16, 4>({ w_time_label.GetRect(), w_time_value.GetRect(), w_etime_label.GetRect(), w_etime_value.GetRect() })), is_multiline::yes)
 #elif HAS_LARGE_DISPLAY()
     , end_result_body(this, end_result_body_rect) // safe to pass even if order changes because EndScreen constructor doesn't use it (therefore guaranteed to be valid)
+    , sp_print_finished_icon(this, sp_rect, &img::sp_print_finished)
     , message_popup(this, Rect16(30, get_row(0), 250, 70), is_multiline::yes) // Rect for printing messages from marlin.
+
 #endif // USE_<display>
 {
     // we will handle HELD_RELEASED event in this window
+    sp_print_finished_icon.Disable();
+    sp_print_finished_icon.Unshadow();
+    sp_print_finished_icon.Hide();
+    was_network_print = false;
+    EnableButton(BtnSocket::Left);
+    EnableButton(BtnSocket::Middle);
+    EnableButton(BtnSocket::Right);
+
     DisableLongHoldScreenAction();
+    end_screen_state = EndScreenState::end_screen;
 
     // Hide popup, only show it when we have a message to show
     message_popup.set_visible(false);
@@ -240,7 +344,7 @@ screen_printing_data_t::screen_printing_data_t()
 
     strlcpy(text_filename.data(), GCodeInfo::getInstance().GetGcodeFilename(), text_filename.size());
     w_filename.set_font(Font::big);
-    w_filename.SetPadding({ 0, 0, 0, 0 });
+    w_filename.SetPadding({0, 0, 0, 0});
     w_filename.SetText(string_view_utf8::MakeRAM(text_filename.data()));
 
     w_etime_label.set_font(Font::small);
@@ -285,6 +389,15 @@ void screen_printing_data_t::windowEvent(window_t *sender, GUI_event_t event, vo
 
     /// -- close screen when print is done / stopped and USB media is removed
     if (!marlin_vars().media_inserted && (p_state == printing_state_t::PRINTED || p_state == printing_state_t::STOPPED)) {
+        ResetButtonRect(BtnSocket::Left);
+        ResetButtonRect(BtnSocket::Middle);
+        ResetButtonRect(BtnSocket::Right);
+        SetButtonVisible(BtnSocket::Left, true);
+        SetButtonVisible(BtnSocket::Middle, true);
+        SetButtonVisible(BtnSocket::Right, true);
+        was_network_print = false;
+        second_click_left = false;
+
         marlin_client::print_exit();
         return;
     }
@@ -351,18 +464,18 @@ void screen_printing_data_t::windowEvent(window_t *sender, GUI_event_t event, vo
             string_view_utf8 txt;
             switch (*reason) {
             case MMU2::MaintenanceReason::Failures:
-    #if HAS_LOADCELL()
+#if HAS_LOADCELL()
                 txt = _("Printer has detected multiple consecutive filament loading errors. We recommend checking Nextruder main-plate. Visit prusa.io/mmu-care");
-    #else
+#else
                 txt = _("Printer has detected multiple consecutive filament loading errors. We recommend checking the extruder. Visit prusa.io/mmu-care");
-    #endif
+#endif
                 break;
             case MMU2::MaintenanceReason::Changes:
-    #if HAS_LOADCELL()
+#if HAS_LOADCELL()
                 txt = _("Maintenance Reminder. Filament changes have reached main-plate lifespan. Inspect the part and ensure you have a spare plate available. Visit prusa.io/mmu-care");
-    #else
+#else
                 txt = _("Maintenance Reminder. Filament changes have reached 30k. Inspect and clean the extruder. Visit prusa.io/mmu-care");
-    #endif
+#endif
                 break;
             }
 
@@ -371,10 +484,22 @@ void screen_printing_data_t::windowEvent(window_t *sender, GUI_event_t event, vo
     }
 #endif
 
+if (end_screen_state != EndScreenState::end_screen || !showing_end_result) {
+    ScreenPrintingModel::windowEvent(sender, event, param);
+}
 #if HAS_LARGE_DISPLAY()
+    if (shown_end_result && event == GUI_event_t::ENC_UP){
+        second_click_left = false;
+    }
     if (shown_end_result && event == GUI_event_t::ENC_DN
         && ((buttons[0].IsEnabled() && buttons[0].IsFocused()) || (!buttons[0].IsEnabled() && buttons[1].IsFocused()))) {
-        start_showing_end_result();
+        if (second_click_left){
+            start_showing_end_result();
+            second_click_left = false;
+        }
+        else{
+            second_click_left = true;
+        }
         return;
     }
 
@@ -404,41 +529,141 @@ void screen_printing_data_t::windowEvent(window_t *sender, GUI_event_t event, vo
         return;
     }
 
-    if (!showing_end_result) {
-        ScreenPrintingModel::windowEvent(sender, event, param);
-    }
+//    if (!showing_end_result) {
+//        ScreenPrintingModel::windowEvent(sender, event, param);
+//    }
 #else
-    ScreenPrintingModel::windowEvent(sender, event, param);
+//    ScreenPrintingModel::windowEvent(sender, event, param);
 #endif
 }
-
 #if HAS_LARGE_DISPLAY()
 void screen_printing_data_t::start_showing_end_result() {
 
-    // hide previous
-    for (auto &button : buttons) {
-        button.Hide();
-    }
-
-    for (auto &label : labels) {
-        label.Hide();
-    }
-
     arrow_left.Hide();
     w_progress_txt.Hide();
 
     hide_time_information(); // OK because currently we never show remaining time at the end
 
+    /*DEBUGGING REMOVE FOR PROD*/
+    /********************************************/
+//    connect_client::is_print_network = true;
+    /********************************************/
+
     // show end result
+    if (connect_client::is_print_network){
+        connect_client::is_print_network = false;
+        was_network_print = true;
+        end_screen_state = EndScreenState::print_result_screen;
+    }
+
+    switch (end_screen_state) {
+        case EndScreenState::end_screen:
+             // hide previous
+            for (auto &button : buttons) {
+                button.Hide();
+            }
+
+            for (auto &label : labels) {
+                label.Hide();
+            }
+            header.SetText(_("Finished"));
+            sp_print_finished_icon.Hide();
+            w_filename.Show();
+            w_progress.Show();
+            ResetButtonRect(BtnSocket::Left);
+            SetButtonVisible(BtnSocket::Middle, true);
+            ResetButtonRect(BtnSocket::Middle);
+            ResetButtonRect(BtnSocket::Right);
+            SetButtonIconAndLabel(BtnSocket::Middle, BtnRes::Reprint, LabelRes::Reprint);
+            if (was_network_print){
+                EnableButton(BtnSocket::Left);
+                SetButtonIconAndLabel(BtnSocket::Left, BtnRes::Next_Queue_Item, LabelRes::Next_Queue_Item);
+            }
+            else{
+                DisableButton(BtnSocket::Left);
+                SetButtonIconAndLabel(BtnSocket::Left, BtnRes::Settings, LabelRes::Settings);
+
+            }
+            SetButtonIconAndLabel(BtnSocket::Right, BtnRes::Home, LabelRes::Home);
+            EnableButton(BtnSocket::Middle);
+            EnableButton(BtnSocket::Right);
+
+            end_result_body.Show();
+            CaptureNormalWindow(end_result_body);
 
-    end_result_body.Show();
-    CaptureNormalWindow(end_result_body);
+
+            break;
+
+        case EndScreenState::print_result_screen:
+            header.SetText(_("Print Result"));
+            sp_print_finished_icon.Show();
+            w_filename.Hide();
+            w_progress.Hide();
+            DisableButton(BtnSocket::Middle);
+            SetButtonVisible(BtnSocket::Left, true); //
+            SetButtonVisible(BtnSocket::Middle, false);
+            SetButtonVisible(BtnSocket::Right, true);
+            SetLabelVisible(BtnSocket::Right, false);
+            SetLabelVisible(BtnSocket::Left, false);
+            SetButtonRect(BtnSocket::Right, sp_big_button_r);
+            SetButtonRect(BtnSocket::Left, sp_big_button_l);
+            SetButtonIconAndLabel(BtnSocket::Left, BtnRes::Print_OK, LabelRes::Print_OK);
+            SetButtonIconAndLabel(BtnSocket::Right, BtnRes::Print_Failed, LabelRes::Print_Failed);
+            EnableButton(BtnSocket::Left);
+            EnableButton(BtnSocket::Right);
+            break;
+    }
 
     showing_end_result = true;
     shown_end_result = true;
+    second_click_left = false;
 }
 
 void screen_printing_data_t::stop_showing_end_result() {
+
+    switch (end_screen_state) {
+        case EndScreenState::end_screen:
+            header.SetText(_("Finished"));
+            ResetButtonRect(BtnSocket::Left);
+            SetButtonVisible(BtnSocket::Middle, true);
+            ResetButtonRect(BtnSocket::Middle);
+            ResetButtonRect(BtnSocket::Right);
+            sp_print_finished_icon.Hide();
+            w_filename.Show();
+            w_progress.Show();
+            SetButtonIconAndLabel(BtnSocket::Middle, BtnRes::Reprint, LabelRes::Reprint);
+            if (was_network_print){
+                EnableButton(BtnSocket::Left);
+                SetButtonIconAndLabel(BtnSocket::Left, BtnRes::Next_Queue_Item, LabelRes::Next_Queue_Item);
+            }
+            else{
+                DisableButton(BtnSocket::Left);
+                SetButtonIconAndLabel(BtnSocket::Left, BtnRes::Settings, LabelRes::Settings);
+
+            }
+            EnableButton(BtnSocket::Middle);
+            EnableButton(BtnSocket::Right);
+            break;
+
+        case EndScreenState::print_result_screen:
+            header.SetText(_("Print Result"));
+            sp_print_finished_icon.Show();
+            w_filename.Hide();
+            w_progress.Hide();
+            EnableButton(BtnSocket::Left);
+            SetButtonVisible(BtnSocket::Middle, false);
+            SetLabelVisible(BtnSocket::Right, false);
+            SetLabelVisible(BtnSocket::Left, false);
+            SetButtonRect(BtnSocket::Left, sp_big_button_l);
+            SetButtonRect(BtnSocket::Right, sp_big_button_r);
+            SetButtonIconAndLabel(BtnSocket::Left, BtnRes::Print_OK, LabelRes::Print_OK);
+            SetButtonIconAndLabel(BtnSocket::Right, BtnRes::Print_Failed, LabelRes::Print_Failed);
+            EnableButton(BtnSocket::Left);
+            EnableButton(BtnSocket::Right);
+
+            return;
+    }
+
     // show previous
     for (auto &button : buttons) {
         button.Show();
@@ -595,6 +820,12 @@ void screen_printing_data_t::set_pause_icon_and_label() {
     case printing_state_t::COUNT:
     case printing_state_t::INITIAL:
     case printing_state_t::PRINTING:
+        EnableButton(BtnSocket::Left);
+        EnableButton(BtnSocket::Middle);
+        EnableButton(BtnSocket::Right);
+        SetButtonIconAndLabel(BtnSocket::Middle, BtnRes::Pause, LabelRes::Pause);
+
+        break;
     case printing_state_t::MBL_FAILED:
         EnableButton(BtnSocket::Middle);
         SetButtonIconAndLabel(BtnSocket::Middle, BtnRes::Pause, LabelRes::Pause);
@@ -785,6 +1016,11 @@ void screen_printing_data_t::change_print_state() {
     case State::Aborted:
         stop_pressed = false;
         st = printing_state_t::STOPPED;
+
+        if (connect_client::is_print_network){
+            connect_client::is_print_network = false;
+            was_network_print = true;
+        }
         break;
     case State::Finished:
     case State::Exit:
