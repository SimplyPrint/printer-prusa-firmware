diff --git a/src/common/feature/xbuddy_extension/xbuddy_extension.cpp b/src/common/feature/xbuddy_extension/xbuddy_extension.cpp
index 54c536cd0ec6ab54e53112ada8cc19ffe4e21527..5957d6984db033098b251cb1a7584fd65d7a8602 100644
--- a/src/common/feature/xbuddy_extension/xbuddy_extension.cpp
+++ b/src/common/feature/xbuddy_extension/xbuddy_extension.cpp
@@ -72,14 +72,15 @@ void XBuddyExtension::step() {
         last_fan_update_ms = now_ms;
 
         const auto max_auto_pwm = max_cooling_pwm();
-
+        constexpr float filtration_p_constant = 2.0f * 1.5f; // or just a fixed value like 1.0f
         switch (filtration_backend) {
 
         case ChamberFiltrationBackend::xbe_official_filter:
             // The filtration fan does both filtration and cooling
-            cooling_fans_actual_pwm_ = cooling_fans_target_pwm_.value_or(FanPWM { 0 });
-            filtration_fan_actual_pwm_ = std::max(chamber_cooling.compute_pwm_step(*temp, target_temp, filtration_fan_target_pwm_, max_auto_pwm), filtration_pwm);
-            can_auto_cool_ = (filtration_fan_target_pwm_ == pwm_auto);
+
+            cooling_fans_actual_pwm_ = chamber_cooling.compute_pwm_step(*temp, target_temp, cooling_fans_target_pwm_, max_auto_pwm);
+            filtration_fan_actual_pwm_ = std::max(chamber_cooling.compute_pwm_step(*temp, target_temp, filtration_fan_target_pwm_, max_auto_pwm, filtration_p_constant), filtration_pwm);
+            can_auto_cool_ = (cooling_fans_target_pwm_ == pwm_auto || filtration_fan_target_pwm_ == pwm_auto);
             break;
 
         case ChamberFiltrationBackend::xbe_filter_on_cooling_fans:
