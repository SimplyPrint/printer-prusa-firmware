diff --git a/src/gui/screen_printing.cpp b/src/gui/screen_printing.cpp
index 83e8b4be072ab21d4d770f8ea18303b9a947d88a..166ba7f0d0356fa4b7bd540aa860ef9de2764541 100644
--- a/src/gui/screen_printing.cpp
+++ b/src/gui/screen_printing.cpp
@@ -19,6 +19,8 @@
 #include <option/has_loadcell.h>
 #include <option/has_mmu2.h>
 #include <option/has_toolchanger.h>
+#include <connect/marlin_printer.hpp>
+#include <connect/connect.hpp>
 #if HAS_MMU2()
     #include <feature/prusa/MMU2/mmu2_mk4.h>
     #include <window_msgbox.hpp>
@@ -32,11 +34,22 @@
     #include "../Marlin/src/feature/prusa/crash_recovery.hpp"
 #endif
 
+void send_message_sp(std::string message, const char * error_message) {
+    connect_client::MarlinPrinter connect_printer;
+    SharedBuffer buffer;
+    connect_client::Connect client(connect_printer, buffer);
+    int response_code = client.send_simplyprint(message);
+    if (response_code / 100 != 2) {
+        MsgBoxWarning(_(error_message), Responses_Ok);
+    }
+}
+
 using namespace marlin_server;
 
 void screen_printing_data_t::invalidate_print_state() {
     state__readonly__use_change_print_state = printing_state_t::COUNT;
 }
+
 printing_state_t screen_printing_data_t::GetState() const {
     return state__readonly__use_change_print_state;
 }
@@ -45,21 +58,55 @@ void screen_printing_data_t::tuneAction() {
     if (buttons[ftrstd::to_underlying(BtnSocket::Left)].IsShadowed()) {
         return;
     }
+#if HAS_LARGE_DISPLAY()
+    if (showing_end_result) {
+        switch (end_screen_state){
+            case EndScreenState::end_screen:
+                break;
+            case EndScreenState::bed_cleared_screen:
+                break;
+            case EndScreenState::print_result_screen:
+                send_message_sp("print succeeded", "Failed to send print result message.");
+                end_screen_state = EndScreenState::bed_cleared_screen;
+                start_showing_end_result();
+                break;
+        }
+        return;
+    }
+#endif
     switch (GetState()) {
-    case printing_state_t::PRINTING:
-    case printing_state_t::ABSORBING_HEAT:
-    case printing_state_t::PAUSED:
-        Screens::Access()->Open(ScreenFactory::Screen<ScreenMenuTune>);
-        break;
-    default:
-        break;
+        case printing_state_t::PRINTING:
+        case printing_state_t::ABSORBING_HEAT:
+        case printing_state_t::PAUSED:
+            Screens::Access()->Open(ScreenFactory::Screen<ScreenMenuTune>);
+            break;
+        default:
+            break;
     }
+
 }
 
+
 void screen_printing_data_t::pauseAction() {
     if (buttons[ftrstd::to_underlying(BtnSocket::Middle)].IsShadowed()) {
         return;
     }
+#if HAS_LARGE_DISPLAY()
+    if (showing_end_result) {
+        switch (end_screen_state) {
+            case EndScreenState::end_screen:
+                break;
+            case EndScreenState::bed_cleared_screen:
+                send_message_sp("bed cleared", "Failed to send bed clear message.");
+                end_screen_state = EndScreenState::end_screen;
+                start_showing_end_result();
+                break;
+            case EndScreenState::print_result_screen:
+                break;
+        }
+        return;
+    }
+#endif
     switch (GetState()) {
     case printing_state_t::PRINTING:
         marlin_client::print_pause();
@@ -83,10 +130,30 @@ void screen_printing_data_t::pauseAction() {
     }
 }
 
+
+
 void screen_printing_data_t::stopAction() {
     if (buttons[ftrstd::to_underlying(BtnSocket::Right)].IsShadowed()) {
         return;
     }
+#if HAS_LARGE_DISPLAY()
+    if (showing_end_result) {
+
+    switch (end_screen_state){
+        case EndScreenState::end_screen:
+            break;
+        case EndScreenState::bed_cleared_screen:
+            break;
+        case EndScreenState::print_result_screen:
+            send_message_sp("print failed", "Failed to send print result message.");
+            end_screen_state = EndScreenState::bed_cleared_screen;
+            start_showing_end_result();
+            break;
+        }
+        return;
+    }
+#endif
+
     switch (GetState()) {
     case printing_state_t::STOPPED:
     case printing_state_t::PRINTED:
@@ -107,6 +174,7 @@ void screen_printing_data_t::stopAction() {
         }
     }
     }
+
 }
 
 /******************************************************************************/
@@ -140,47 +208,62 @@ constexpr size_t rotating_circles_left_offset { 0 };
 constexpr Rect16 rotating_circles_rect { column_left + rotating_circles_left_offset, get_row(1) + height(etime_val_font) + 5, rotating_circles_width, rotating_circles_height };
 
 constexpr Rect16 end_result_body_rect { 0, row_0 - EndResultBody::extra_top_space, GuiDefaults::ScreenWidth, GuiDefaults::ScreenHeight - GuiDefaults::FooterHeight - row_0 };
-#endif
+constexpr Rect16 sp_rect { 0, 10, GuiDefaults::ScreenWidth, GuiDefaults::ScreenHeight - GuiDefaults::FooterHeight 10 - row_0 };
 
+#endif
 } // namespace
 
 screen_printing_data_t::screen_printing_data_t()
-    : ScreenPrintingModel(_(caption))
+        : ScreenPrintingModel(_(caption))
 #if (HAS_LARGE_DISPLAY())
-    , print_progress(this)
-    , arrow_left(this, arrow_left_rect, arrow_left_res)
-    , rotating_circles(this, rotating_circles_rect, ftrstd::to_underlying(CurrentlyShowing::_count))
+        , print_progress(this)
+        , arrow_left(this, arrow_left_rect, arrow_left_res)
+        , rotating_circles(this, rotating_circles_rect, ftrstd::to_underlying(CurrentlyShowing::_count))
 #endif
 #if HAS_MINI_DISPLAY()
-    , w_filename(this, Rect16(10, 33, 220, 29))
-    , w_progress(this, Rect16(10, 70, GuiDefaults::RectScreen.Width() - 2 * 10, 16))
-    , w_progress_txt(this, Rect16(10, 86, GuiDefaults::RectScreen.Width() - 2 * 10, 30)) // font: Normal (11x18 px)
-    , w_time_label(this, Rect16(10, 128, 101, 20), is_multiline::no)
-    , w_time_value(this, Rect16(10, 148, 101, 20), is_multiline::no)
-    , w_etime_label(this, Rect16(130, 128, 101, 20), is_multiline::no)
-    , w_etime_value(this, Rect16(120, 148, 111, 37), is_multiline::yes)
+        , w_filename(this, Rect16(10, 33, 220, 29))
+        , w_progress(this, Rect16(10, 70, GuiDefaults::RectScreen.Width() - 2 * 10, 16))
+        , w_progress_txt(this, Rect16(10, 86, GuiDefaults::RectScreen.Width() - 2 * 10, 30)) // font: Normal (11x18 px)
+        , w_time_label(this, Rect16(10, 128, 101, 20), is_multiline::no)
+        , w_time_value(this, Rect16(10, 148, 101, 20), is_multiline::no)
+        , w_etime_label(this, Rect16(130, 128, 101, 20), is_multiline::no)
+        , w_etime_value(this, Rect16(120, 148, 111, 37), is_multiline::yes)
 #elif HAS_LARGE_DISPLAY()
-    , w_filename(this, Rect16(30, 38, 420, 24))
-    , w_progress(this, Rect16(30, 65, GuiDefaults::RectScreen.Width() - 2 * 30, 16))
-    , w_progress_txt(this, EndResultBody::get_progress_txt_rect(row_0)) // Left side option: 30, 115, 100, 54 | font: Large (53x30 px)
-    , w_etime_label(this, Rect16(30, get_row(0), 150, 20), is_multiline::no) // Right side option: 300, 118, 150, 20
-    , w_etime_value(this, Rect16(30, get_row(1), 200, 23), is_multiline::no) // Right side option: 250, 138, 200, 23
+        , w_filename(this, Rect16(30, 38, 420, 24))
+        , w_progress(this, Rect16(30, 65, GuiDefaults::RectScreen.Width() - 2 * 30, 16))
+        , w_progress_txt(this, EndResultBody::get_progress_txt_rect(row_0)) // Left side option: 30, 115, 100, 54 | font: Large (53x30 px)
+        , w_etime_label(this, Rect16(30, get_row(0), 150, 20), is_multiline::no) // Right side option: 300, 118, 150, 20
+        , w_etime_value(this, Rect16(30, get_row(1), 200, 23), is_multiline::no) // Right side option: 250, 138, 200, 23
 #endif // USE_<display>
-    , message_timer(0)
-    , stop_pressed(false)
-    , waiting_for_abort(false)
-    , state__readonly__use_change_print_state(printing_state_t::COUNT)
+        , message_timer(0), stop_pressed(false), waiting_for_abort(false),
+          state__readonly__use_change_print_state(printing_state_t::COUNT)
 #if HAS_MINI_DISPLAY()
-    , popup_rect(Rect16::Merge(std::array<Rect16, 4>({ w_time_label.GetRect(), w_time_value.GetRect(), w_etime_label.GetRect(), w_etime_value.GetRect() })))
-    , time_end_format(PT_t::init)
+, popup_rect(Rect16::Merge(std::array<Rect16, 4>({ w_time_label.GetRect(), w_time_value.GetRect(), w_etime_label.GetRect(), w_etime_value.GetRect() })))
+, time_end_format(PT_t::init)
 #elif HAS_LARGE_DISPLAY()
-    , popup_rect(Rect16(30, get_row(0), 250, 70)) // Rect for printing messages from marlin.
-    , end_result_body(this, end_result_body_rect) // safe to pass even if order changes because EndScreen constructor doesn't use it (therefore guaranteed to be valid)
+, popup_rect(Rect16(30, get_row(0), 250, 70)) // Rect for printing messages from marlin.
+, end_result_body(this, end_result_body_rect) // safe to pass even if order changes because EndScreen constructor doesn't use it (therefore guaranteed to be valid)
+, sp_bed_cleared_icon(this, sp_rect, &img::sp_bed_cleared)
+, sp_print_finished_icon(this, sp_rect, &img::sp_print_finished)
+
+//Rect16((display::GetW() - img::serial_printing_172x138.w) / 2, GuiDefaults::RectScreenBody.Top(), img::serial_printing_172x138.w, img::serial_printing_172x138.h)
+
 #endif // USE_<display>
 {
+
     // we will handle HELD_RELEASED event in this window
+    sp_bed_cleared_icon.Disable();
+    sp_bed_cleared_icon.Unshadow();
+    sp_print_finished_icon.Disable();
+    sp_print_finished_icon.Unshadow();
+    sp_bed_cleared_icon.Hide();
+    sp_print_finished_icon.Hide();
+
+    EnableButton(BtnSocket::Left);
+    EnableButton(BtnSocket::Middle);
+    EnableButton(BtnSocket::Right);
     DisableLongHoldScreenAction();
-
+    end_screen_state = EndScreenState::end_screen;
     strlcpy(text_filament.data(), "999m", text_filament.size());
 
 #if HAS_MINI_DISPLAY()
@@ -217,7 +300,7 @@ screen_printing_data_t::screen_printing_data_t()
 
     strlcpy(text_filename.data(), GCodeInfo::getInstance().GetGcodeFilename(), text_filename.size());
     w_filename.set_font(Font::big);
-    w_filename.SetPadding({ 0, 0, 0, 0 });
+    w_filename.SetPadding({0, 0, 0, 0});
     w_filename.SetText(string_view_utf8::MakeRAM(text_filename.data()));
 
     w_etime_label.set_font(Font::small);
@@ -322,18 +405,18 @@ void screen_printing_data_t::windowEvent(window_t *sender, GUI_event_t event, vo
             string_view_utf8 txt;
             switch (*reason) {
             case MMU2::MaintenanceReason::Failures:
-    #if HAS_LOADCELL()
+#if HAS_LOADCELL()
                 txt = _("Printer has detected multiple consecutive filament loading errors. We recommend checking Nextruder main-plate. Visit prusa.io/mmu-care");
-    #else
+#else
                 txt = _("Printer has detected multiple consecutive filament loading errors. We recommend checking the extruder. Visit prusa.io/mmu-care");
-    #endif
+#endif
                 break;
             case MMU2::MaintenanceReason::Changes:
-    #if HAS_LOADCELL()
+#if HAS_LOADCELL()
                 txt = _("Maintenance Reminder. Filament changes have reached main-plate lifespan. Inspect the part and ensure you have a spare plate available. Visit prusa.io/mmu-care");
-    #else
+#else
                 txt = _("Maintenance Reminder. Filament changes have reached 30k. Inspect and clean the extruder. Visit prusa.io/mmu-care");
-    #endif
+#endif
                 break;
             }
 
@@ -342,6 +425,10 @@ void screen_printing_data_t::windowEvent(window_t *sender, GUI_event_t event, vo
     }
 #endif
 
+if (end_screen_state != EndScreenState::end_screen || !showing_end_result) {
+    ScreenPrintingModel::windowEvent(sender, event, param);
+}
+
 #if HAS_LARGE_DISPLAY()
     if (shown_end_result && event == GUI_event_t::ENC_DN
         && ((buttons[0].IsEnabled() && buttons[0].IsFocused()) || (!buttons[0].IsEnabled() && buttons[1].IsFocused()))) {
@@ -375,41 +462,129 @@ void screen_printing_data_t::windowEvent(window_t *sender, GUI_event_t event, vo
         return;
     }
 
-    if (!showing_end_result) {
-        ScreenPrintingModel::windowEvent(sender, event, param);
-    }
+//    if (!showing_end_result) {
+//        ScreenPrintingModel::windowEvent(sender, event, param);
+//    }
 #else
-    ScreenPrintingModel::windowEvent(sender, event, param);
+//    ScreenPrintingModel::windowEvent(sender, event, param);
 #endif
 }
 
 #if HAS_LARGE_DISPLAY()
 void screen_printing_data_t::start_showing_end_result() {
 
-    // hide previous
-    for (auto &button : buttons) {
-        button.Hide();
-    }
-
-    for (auto &label : labels) {
-        label.Hide();
-    }
-
     arrow_left.Hide();
     w_progress_txt.Hide();
 
     hide_time_information(); // OK because currently we never show remaining time at the end
 
     // show end result
+    if (connect_client::is_print_network){
+        connect_client::is_print_network = false;
+        end_screen_state = EndScreenState::print_result_screen;
+    }
+
+    switch (end_screen_state) {
+        case EndScreenState::end_screen:
+             // hide previous
+            for (auto &button : buttons) {
+                button.Hide();
+            }
+
+            for (auto &label : labels) {
+                label.Hide();
+            }
+            header.SetText(_("Finished"));
+            sp_bed_cleared_icon.Hide();
+            sp_print_finished_icon.Hide();
+            SetButtonIconAndLabel(BtnSocket::Middle, BtnRes::Reprint, LabelRes::Reprint);
+            SetButtonIconAndLabel(BtnSocket::Left, BtnRes::Disconnect, LabelRes::Disabled);
+            SetButtonIconAndLabel(BtnSocket::Right, BtnRes::Home, LabelRes::Home);
+            DisableButton(BtnSocket::Left);
+            EnableButton(BtnSocket::Middle);
+            EnableButton(BtnSocket::Right);
 
-    end_result_body.Show();
-    CaptureNormalWindow(end_result_body);
+            end_result_body.Show();
+            CaptureNormalWindow(end_result_body);
+
+
+            break;
+        case EndScreenState::bed_cleared_screen:
+            header.SetText(_("Bed Cleared?"));
+            sp_bed_cleared_icon.Show();
+            sp_print_finished_icon.Hide();
+            SetButtonIconAndLabel(BtnSocket::Middle, BtnRes::Bed_Clear, LabelRes::Bed_Clear);
+            EnableButton(BtnSocket::Middle);
+            SetButtonIconAndLabel(BtnSocket::Left, BtnRes::Disconnect, LabelRes::Disabled);
+            SetButtonIconAndLabel(BtnSocket::Right, BtnRes::Disconnect, LabelRes::Disabled);
+            DisableButton(BtnSocket::Right);
+            DisableButton(BtnSocket::Left);
+
+
+            break;
+        case EndScreenState::print_result_screen:
+            header.SetText(_("Print Result"));
+            sp_bed_cleared_icon.Hide();
+            sp_print_finished_icon.Show();
+            SetButtonIconAndLabel(BtnSocket::Left, BtnRes::Print_OK, LabelRes::Print_OK);
+            SetButtonIconAndLabel(BtnSocket::Right, BtnRes::Print_Failed, LabelRes::Print_Failed);
+            EnableButton(BtnSocket::Left);
+            EnableButton(BtnSocket::Right);
+            SetButtonIconAndLabel(BtnSocket::Middle, BtnRes::Disconnect, LabelRes::Disabled);
+            DisableButton(BtnSocket::Middle);
+            break;
+    }
+
+//remove later
+/*************************************/
+//    end_result_body.Show();
+//    CaptureNormalWindow(end_result_body);
+/*************************************/
 
     showing_end_result = true;
     shown_end_result = true;
 }
 
 void screen_printing_data_t::stop_showing_end_result() {
+
+    switch (end_screen_state) {
+        case EndScreenState::end_screen:
+            header.SetText(_("Finished"));
+            sp_bed_cleared_icon.Hide();
+            sp_print_finished_icon.Hide();
+            SetButtonIconAndLabel(BtnSocket::Middle, BtnRes::Reprint, LabelRes::Reprint);
+            SetButtonIconAndLabel(BtnSocket::Left, BtnRes::Disconnect, LabelRes::Disabled);
+            SetButtonIconAndLabel(BtnSocket::Right, BtnRes::Home, LabelRes::Home);
+            DisableButton(BtnSocket::Left);
+            EnableButton(BtnSocket::Middle);
+            EnableButton(BtnSocket::Right);
+            break;
+
+        case EndScreenState::bed_cleared_screen:
+            header.SetText(_("Bed Cleared?"));
+            sp_bed_cleared_icon.Show();
+            sp_print_finished_icon.Hide();
+            SetButtonIconAndLabel(BtnSocket::Middle, BtnRes::Bed_Clear, LabelRes::Bed_Clear);
+            EnableButton(BtnSocket::Middle);
+            SetButtonIconAndLabel(BtnSocket::Left, BtnRes::Disconnect, LabelRes::Disabled);
+            SetButtonIconAndLabel(BtnSocket::Right, BtnRes::Disconnect, LabelRes::Disabled);
+            DisableButton(BtnSocket::Right);
+            DisableButton(BtnSocket::Left);
+            return;
+
+        case EndScreenState::print_result_screen:
+            header.SetText(_("Print Result"));
+            sp_bed_cleared_icon.Hide();
+            sp_print_finished_icon.Show();
+            SetButtonIconAndLabel(BtnSocket::Left, BtnRes::Print_OK, LabelRes::Print_OK);
+            SetButtonIconAndLabel(BtnSocket::Right, BtnRes::Print_Failed, LabelRes::Print_Failed);
+            EnableButton(BtnSocket::Left);
+            EnableButton(BtnSocket::Right);
+            SetButtonIconAndLabel(BtnSocket::Middle, BtnRes::Disconnect, LabelRes::Disabled);
+            DisableButton(BtnSocket::Middle);
+            return;
+    }
+
     // show previous
     for (auto &button : buttons) {
         button.Show();
@@ -560,6 +735,12 @@ void screen_printing_data_t::set_pause_icon_and_label() {
     case printing_state_t::COUNT:
     case printing_state_t::INITIAL:
     case printing_state_t::PRINTING:
+        EnableButton(BtnSocket::Left);
+        EnableButton(BtnSocket::Middle);
+        EnableButton(BtnSocket::Right);
+        SetButtonIconAndLabel(BtnSocket::Middle, BtnRes::Pause, LabelRes::Pause);
+
+        break;
     case printing_state_t::MBL_FAILED:
         EnableButton(BtnSocket::Middle);
         SetButtonIconAndLabel(BtnSocket::Middle, BtnRes::Pause, LabelRes::Pause);
@@ -669,93 +850,93 @@ void screen_printing_data_t::change_print_state() {
     printing_state_t st = printing_state_t::COUNT;
 
     switch (marlin_vars()->print_state) {
-    case State::Idle:
-    case State::WaitGui:
-    case State::PrintPreviewInit:
-    case State::PrintPreviewImage:
-    case State::PrintPreviewConfirmed:
-    case State::PrintPreviewQuestions:
+        case State::Idle:
+        case State::WaitGui:
+        case State::PrintPreviewInit:
+        case State::PrintPreviewImage:
+        case State::PrintPreviewConfirmed:
+        case State::PrintPreviewQuestions:
 #if HAS_TOOLCHANGER() || HAS_MMU2()
-    case State::PrintPreviewToolsMapping:
+            case State::PrintPreviewToolsMapping:
 #endif
-    case State::PrintInit:
-        st = printing_state_t::INITIAL;
-        break;
-    case State::Printing:
-        if (bed_preheat.is_waiting()) {
-            st = printing_state_t::ABSORBING_HEAT;
-        } else {
-            st = printing_state_t::PRINTING;
-        }
-        break;
-    case State::PowerPanic_AwaitingResume:
-    case State::Paused:
-        // stop_pressed = false;
-        st = printing_state_t::PAUSED;
-        break;
-    case State::Pausing_Begin:
-    case State::Pausing_Failed_Code:
-    case State::Pausing_WaitIdle:
-    case State::Pausing_ParkHead:
-        st = printing_state_t::PAUSING;
+        case State::PrintInit:
+            st = printing_state_t::INITIAL;
+            break;
+        case State::Printing:
+            if (bed_preheat.is_waiting()) {
+                st = printing_state_t::ABSORBING_HEAT;
+            } else {
+                st = printing_state_t::PRINTING;
+            }
+            break;
+        case State::PowerPanic_AwaitingResume:
+        case State::Paused:
+            // stop_pressed = false;
+            st = printing_state_t::PAUSED;
+            break;
+        case State::Pausing_Begin:
+        case State::Pausing_Failed_Code:
+        case State::Pausing_WaitIdle:
+        case State::Pausing_ParkHead:
+            st = printing_state_t::PAUSING;
 // When print is paused, progress screen needs to reinit it's thumbnail file handler
 // because USB removal error crashes file handler access. Progress screen should not be enabled during pause -> reinit on EVERY pause
 #if HAS_LARGE_DISPLAY()
-        print_progress.Pause();
+            print_progress.Pause();
 #endif
-        break;
-    case State::Resuming_Reheating:
-        stop_pressed = false;
-        st = printing_state_t::REHEATING;
-        break;
-    case State::Resuming_Begin:
-    case State::Resuming_UnparkHead_XY:
-    case State::Resuming_UnparkHead_ZE:
-    case State::CrashRecovery_Begin:
-    case State::CrashRecovery_Retracting:
-    case State::CrashRecovery_Lifting:
-    case State::CrashRecovery_ToolchangePowerPanic:
-    case State::CrashRecovery_XY_Measure:
+            break;
+        case State::Resuming_Reheating:
+            stop_pressed = false;
+            st = printing_state_t::REHEATING;
+            break;
+        case State::Resuming_Begin:
+        case State::Resuming_UnparkHead_XY:
+        case State::Resuming_UnparkHead_ZE:
+        case State::CrashRecovery_Begin:
+        case State::CrashRecovery_Retracting:
+        case State::CrashRecovery_Lifting:
+        case State::CrashRecovery_ToolchangePowerPanic:
+        case State::CrashRecovery_XY_Measure:
 #if HAS_TOOLCHANGER()
-    case State::CrashRecovery_Tool_Pickup:
+            case State::CrashRecovery_Tool_Pickup:
 #endif
-    case State::CrashRecovery_XY_HOME:
-    case State::CrashRecovery_HOMEFAIL:
-    case State::CrashRecovery_Axis_NOK:
-    case State::CrashRecovery_Repeated_Crash:
-    case State::PowerPanic_Resume:
-        stop_pressed = false;
-        st = printing_state_t::RESUMING;
+        case State::CrashRecovery_XY_HOME:
+        case State::CrashRecovery_HOMEFAIL:
+        case State::CrashRecovery_Axis_NOK:
+        case State::CrashRecovery_Repeated_Crash:
+        case State::PowerPanic_Resume:
+            stop_pressed = false;
+            st = printing_state_t::RESUMING;
 #if HAS_LARGE_DISPLAY()
-        print_progress.Resume();
+            print_progress.Resume();
 #endif
-        break;
-    case State::Aborting_Begin:
-    case State::Aborting_WaitIdle:
-    case State::Aborting_UnloadFilament:
-    case State::Aborting_ParkHead:
-    case State::Aborting_Preview:
-        stop_pressed = false;
-        st = printing_state_t::ABORTING;
-        break;
-    case State::Finishing_WaitIdle:
-    case State::Finishing_UnloadFilament:
-    case State::Finishing_ParkHead:
-        st = printing_state_t::PRINTING;
-        break;
-    case State::Aborted:
-        stop_pressed = false;
-        st = printing_state_t::STOPPED;
-        break;
-    case State::Finished:
-    case State::Exit:
-        st = printing_state_t::PRINTED;
-        break;
-    case State::PowerPanic_acFault:
-    case State::SerialPrintInit:
-        // this state is never reached
-        __builtin_unreachable();
-        return;
+            break;
+        case State::Aborting_Begin:
+        case State::Aborting_WaitIdle:
+        case State::Aborting_UnloadFilament:
+        case State::Aborting_ParkHead:
+        case State::Aborting_Preview:
+            stop_pressed = false;
+            st = printing_state_t::ABORTING;
+            break;
+        case State::Finishing_WaitIdle:
+        case State::Finishing_UnloadFilament:
+        case State::Finishing_ParkHead:
+            st = printing_state_t::PRINTING;
+            break;
+        case State::Aborted:
+            stop_pressed = false;
+            st = printing_state_t::STOPPED;
+            break;
+        case State::Finished:
+        case State::Exit:
+            st = printing_state_t::PRINTED;
+            break;
+        case State::PowerPanic_acFault:
+        case State::SerialPrintInit:
+            // this state is never reached
+            __builtin_unreachable();
+            return;
     }
     if (stop_pressed) {
         st = printing_state_t::ABORTING;
