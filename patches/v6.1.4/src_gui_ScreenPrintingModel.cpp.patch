diff --git a/src/gui/ScreenPrintingModel.cpp b/src/gui/ScreenPrintingModel.cpp
index 47dd8eb774c168a83f7ba5e78e03e5c67d4e941d..0cdc124c40e05db33a3ec63ef77012bc5a27f5e0 100644
--- a/src/gui/ScreenPrintingModel.cpp
+++ b/src/gui/ScreenPrintingModel.cpp
@@ -7,41 +7,57 @@
 #include "screen_printing_layout.hpp"
 
 namespace {
-constexpr uint16_t btn_size = GuiDefaults::ButtonIconSize;
-constexpr uint16_t btn_y_offset = 185;
-constexpr uint16_t btn_text_spacing = 5;
-constexpr uint16_t text_height = 17;
-
-constexpr const char *label_resources[] = {
-    N_("Tune"),
-    N_("Pause"),
-    N_("Pausing..."),
-    N_("Stop"),
-    N_("Resume"),
-    N_("Resuming..."),
-    N_("Heating..."),
-    N_("Reprint"),
-    N_("Home"),
-    N_("Skip"),
-    N_("Disconnect")
-};
+    constexpr uint16_t
+    btn_size = GuiDefaults::ButtonIconSize;
+    constexpr uint16_t
+    btn_y_offset = 185;
+    constexpr uint16_t
+    btn_text_spacing = 5;
+    constexpr uint16_t
+    text_height = 17;
+
+    constexpr const char *label_resources[] = {
+            N_("Tune"),
+            N_("Pause"),
+            N_("Pausing..."),
+            N_("Stop"),
+            N_("Resume"),
+            N_("Resuming..."),
+            N_("Heating..."),
+            N_("Reprint"),
+            N_("Home"),
+            N_("Skip"),
+            N_("Disconnect"),
+            N_("Print OK"),
+            N_("Print Failed"),
+            N_(" "),
+            N_("Next Q Item"),
+            N_("Disabled"),
+    };
 } // namespace
 
 ScreenPrintingModel::ScreenPrintingModel(string_view_utf8 caption)
-    : IScreenPrinting(caption)
-    , buttons {
-        { this, GetButtonRect(0), &icon_resources[ftrstd::to_underlying(BtnRes::Settings)], [this](window_t &) { TuneAction(); } },
-        { this, GetButtonRect(1), &icon_resources[ftrstd::to_underlying(BtnRes::Pause)], [this](window_t &) { PauseAction(); } },
-        { this, GetButtonRect(2), &icon_resources[ftrstd::to_underlying(BtnRes::Stop)], [this](window_t &) { StopAction(); } },
-    }
-    , labels {
-        { this, GetButtonLabelRect(0), is_multiline::no, is_closed_on_click_t::no, _(label_resources[ftrstd::to_underlying(LabelRes::Settings)]) },
-        { this, GetButtonLabelRect(1), is_multiline::no, is_closed_on_click_t::no, _(label_resources[ftrstd::to_underlying(LabelRes::Pause)]) },
-        { this, GetButtonLabelRect(2), is_multiline::no, is_closed_on_click_t::no, _(label_resources[ftrstd::to_underlying(LabelRes::Stop)]) },
-    } {
+        : IScreenPrinting(caption), buttons{
+        {this, GetButtonRect(0), &icon_resources[ftrstd::to_underlying(BtnRes::Settings)], [this](
+                window_t &) { TuneAction(); }},
+        {this, GetButtonRect(1), &icon_resources[ftrstd::to_underlying(BtnRes::Pause)],    [this](
+                window_t &) { PauseAction(); }},
+        {this, GetButtonRect(2), &icon_resources[ftrstd::to_underlying(BtnRes::Stop)],     [this](
+                window_t &) { StopAction(); }},
+}, labels{
+        {this, GetButtonLabelRect(
+                0), is_multiline::no, is_closed_on_click_t::no, _(label_resources[ftrstd::to_underlying(
+                LabelRes::Settings)])},
+        {this, GetButtonLabelRect(
+                1), is_multiline::no, is_closed_on_click_t::no, _(label_resources[ftrstd::to_underlying(
+                LabelRes::Pause)])},
+        {this, GetButtonLabelRect(
+                2), is_multiline::no, is_closed_on_click_t::no, _(label_resources[ftrstd::to_underlying(
+                LabelRes::Stop)])},
+} {
     for (uint8_t i = 0; i < socket_count; i++) {
         labels[i].set_font(Font::small);
-        labels[i].SetPadding({ 0, 0, 0, 0 });
+        labels[i].SetPadding({0, 0, 0, 0});
         labels[i].SetAlignment(Align_t::Center());
     }
 
@@ -54,7 +70,8 @@ Rect16 ScreenPrintingModel::GetButtonRect(uint8_t idx) {
 }
 
 Rect16 ScreenPrintingModel::GetButtonLabelRect(uint8_t idx) {
-    return Rect16(btn_padding - btn_spacing / 2 + (btn_size + btn_spacing) * idx, btn_y_offset + btn_size + btn_text_spacing, btn_size + btn_spacing, text_height);
+    return Rect16(btn_padding - btn_spacing / 2 + (btn_size + btn_spacing) * idx,
+                  btn_y_offset + btn_size + btn_text_spacing, btn_size + btn_spacing, text_height);
 }
 
 void ScreenPrintingModel::SetButtonIconAndLabel(BtnSocket idx, BtnRes ico_res, LabelRes txt_res) {
@@ -107,3 +124,36 @@ void ScreenPrintingModel::EnableButton(BtnSocket idx) {
     buttons[btn_idx].Enable();
     buttons[btn_idx].Invalidate();
 }
+
+
+void ScreenPrintingModel::SetButtonVisible(BtnSocket idx, bool visible) {
+    const size_t btn_idx = ftrstd::to_underlying(idx);
+    if (visible) {
+        EnableButton(idx);
+        buttons[btn_idx].Show();
+        labels[btn_idx].Show();
+    } else {
+        DisableButton(idx);
+        buttons[btn_idx].Hide();
+        labels[btn_idx].Hide();
+    }
+}
+
+void ScreenPrintingModel::SetLabelVisible(BtnSocket idx, bool visible){
+    const size_t btn_idx = ftrstd::to_underlying(idx);
+    if (visible) {
+        labels[btn_idx].Show();
+    } else {
+        labels[btn_idx].Hide();
+    }
+}
+
+
+void ScreenPrintingModel::ResetButtonRect(BtnSocket idx) {
+    SetButtonRect(idx, GetButtonRect(ftrstd::to_underlying(idx)));
+}
+
+void ScreenPrintingModel::SetButtonRect(BtnSocket idx, Rect16 rect) {
+    const size_t btn_idx = ftrstd::to_underlying(idx);
+    buttons[btn_idx].SetRect(rect);
+}
\ No newline at end of file
